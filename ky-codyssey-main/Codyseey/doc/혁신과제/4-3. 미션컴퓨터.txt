#################################################################
문제 1. 더미 센서 제작
#################################################################
더미 센서에 해당하는 클래스를 생성한다. 클래스의 이름은 DummySensor로 정의한다.
DummySensor의 멤버로 env_values라는 딕서너리를 추가한다. 딕셔너리에는 다음과 같은 항목들이 추가 되어 있어야 한다.
화성 기지 내부 온도 (mars_base_internal_temperature)
화성 기지 외부 온도 (mars_base_external_temperature)
화성 기지 내부 습도 (mars_base_internal_humidity)
회성 기지 외부 광량 (mars_base_external_illuminance)
화성 기지 내부 이산화탄소 농도 (mars_base_internal_co2)
화성 기지 내부 산소 농도 (mars_base_internal_oxygen)
DummySensor는 테스트를 위한 객체이므로 데이터를 랜덤으로 생성한다.
DummySensor 클래스에 set_env() 메소드를 추가한다. set_env() 메소드는 random으로 주어진 범위 안의 값을 생성해서 env_values 항목에 채워주는 역할을 한다. 각 항목의 값의 범위는 다음과 같다.
화성 기지 내부 온도 (18~30도)
화성 기지 외부 온도 (0~21도)
화성 기지 내부 습도 (50~60%)
화성 기지 외부 광량 (500~715 W/m2)
화성 기지 내부 이산화탄소 농도 (0.02~0.1%)
화성 기지 내부 산소 농도 (4%~7%)
DummySensor 클래스는 get_env() 메소드를 추가하는데 get_env() 메소드는 env_values를 return 한다.
DummySensor 클래스를 ds라는 이름으로 인스턴스(Instance)로 만든다.
인스턴스화 한 DummySensor 클래스에서 set_env()와 get_env()를 차례로 호출해서 값을 확인한다.
전체 코드를 mars_mission_computer.py 파일로 저장한다.

#################################################################
보너스 과제
#################################################################
출력하는 내용을 날짜와시간, 화성 기지 내부 온도, 화성 기지 외부 온도, 화성 기지 내부 습도 ,화성 기지 외부 광량, 화성 기지 내부 이산화탄소 농도, 화성 기지 내부 산소 농도 와 같이 파일에 log를 남기는 부분을 get_env()에 추가 한다.

#################################################################
문제 2. 미션 컴퓨터 제작
#################################################################
수행 과제
미션 컴퓨터에 해당하는 클래스를 생성한다. 클래스의 이름은 MissionComputer로 정의한다.
미션 컴퓨터에는 화성 기지의 환경에 대한 값을 저장할 수 있는 딕서너리 객체가 env_values라는 속성으로 포함되어야 한다.
env_values라는 속성 안에는 다음과 같은 내용들이 구현 되어야 한다.
화성 기지 내부 온도 (mars_base_internal_temperature)
화성 기지 외부 온도 (mars_base_external_temperature)
화성 기지 내부 습도 (mars_base_internal_humidity)
회성 기지 외부 광량 (mars_base_external_illuminance)
화성 기지 내부 이산화탄소 농도 (mars_base_internal_co2)
화성 기지 내부 산소 농도 (mars_base_internal_oxygen)
문제 3에서 제작한 DummySensor 클래스를 ds라는 이름으로 인스턴스화 시킨다.
MissionComputer에 get_sensor_data() 메소드를 추가한다.
get_sensor_data() 메소드에 다음과 같은 세 가지 기능을 추가한다.
센서의 값을 가져와서 env_values에 담는다.
env_values의 값을 출력한다. 이때 환경 정보의 값은 json 형태로 화면에 출력한다.
위의 두 가지 동작을 5초에 한번씩 반복한다.
MissionComputer 클래스를 RunComputer 라는 이름으로 인스턴스화 한다.
RunComputer 인스턴스의 get_sensor_data() 메소드를 호출해서 지속적으로 환경에 대한 값을 출력 할 수 있도록 한다.
전체 코드를 mars_mission_computer.py 파일로 저장한다.

#################################################################
보너스 과제
#################################################################
특정 키를 입력할 경우 반복적으로 출력되던 화성 기지의 환경에 대한 출력을 멈추고 ‘System stoped….’ 를 출력 할 수 있어야 한다.
5분에 한번씩 각 환경값에 대한 5분 평균 값을 별도로 출력한다.

#################################################################
문제 3. 미션 컴퓨터 개선
#################################################################
수행과제
파이썬 코드를 사용해서 다음과 같은 미션 컴퓨터의 정보를 알아보는 메소드를 get_mission_computer_info() 라는 이름으로 만들고 문제 7에서 완성한 MissionComputer 클래스에 추가한다.
필요한 미션 컴퓨터의 시스템 정보
운영체계
운영체계 버전
CPU의 타입
CPU의 코어 수
메모리의 크기
get_mission_computer_info()에 가져온 시스템 정보를 JSON 형식으로 출력하는 코드를 포함한다.
미션 컴퓨터의 부하를 가져오는 코드를 get_mission_computer_load() 메소드로 만들고 MissionComputer 클래스에 추가한다
get_mission_computer_load() 메소드의 경우 다음과 같은 정보들을 가져 올 수 있게한다.
CPU 실시간 사용량
메모리 실시간 사용량
get_mission_computer_load()에 해당 결과를 JSON 형식으로 출력하는 코드를 추가한다.
get_mission_computer_info(), get_mission_computer_load()를 호출해서 출력이 잘되는지 확인한다.
MissionComputer 클래스를 runComputer 라는 이름으로 인스턴스화 한다.
runComputer 인스턴스의 get_mission_computer_info(), get_mission_computer_load() 메소드를 호출해서 시스템 정보에 대한 값을 출력 할 수 있도록 한다.
최종적으로 결과를 mars_mission_computer.py 에 저장한다.
#################################################################
보너스 과제
#################################################################
setting.txt 파일을 만들어서 출력되는 정보의 항목을 셋팅 할 수 있도록 코드를 수정한다.

#################################################################
문제 4. 미션 컴퓨터 개선
#################################################################
수행과제
값들을 연속적으로 출력하기 위해서 MissionComputer 클래스에 있는 get_mission_computer_info(), get_mission_computer_load() 두 개의 메소드를 time 라이브러리를 사용해서 각각 20초에 한번씩 결과를 출력 할 수 있게 수정한다.
MissionComputer 클래스를 runComputer 라는 이름으로 인스턴스화 한다.
runComputer 인스턴스의 get_mission_computer_info(), get_mission_computer_load(), get_sensor_data() 메소드를 각각 멀티 쓰레드로 실행 시킨다.
다시 코드를 수정해서 MissionComputer 클래스를 runComputer1, runComputer2, runComputer3 이렇게 3개의 인스턴스를 만든다.
3개의 인스턴스를 멀티 프로세스로 실행시켜서 각각 get_mission_computer_info(), get_mission_computer_load(), get_sensor_data()를 실행시키고 출력을 확인한다.
최종적으로 결과를 mars_mission_computer.py 에 저장한다.
#################################################################
보너스 과제
#################################################################
멀티 쓰레드와 멀티 프로세스에서 반복적으로 출력되는 중간에 특정한 키를 입력 받아 출력을 멈출 수 있게 코드를 작성한다.

#################################################################
개발환경	
#################################################################
Python 버전은 3.x 버전으로 한다.
Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. 
(PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org)
문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
들여 쓰기는 공백을 기본으로 사용합니다.


제약사항
Python에서 기본 제공되는 명령어만 사용해야 하며 별도의 라이브러리나 패키지를 사용해서는 안된다.
random, 시간을 다루는 라이브러리 및 시스템 정보를 가져오는 라이브러리는 사용 가능하다.
쓰레드와 멀티 프로세스를 다루는 부분은 외부 라이브러리 사용 가능하다.
Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다.
경고 메시지 없이 모든 코드는 실행 되어야 한다.
시스템 정보를 가져오는 부분은 예외처리가 되어 있어야 한다.
모든 라이브러리는 안정된 마지막 버전을 사용해야 한다.