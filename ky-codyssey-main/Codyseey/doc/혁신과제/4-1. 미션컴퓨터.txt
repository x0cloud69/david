수행과제
#####################################################################
1. Python 환경 준비
#####################################################################
Python 설치 후 python -V로 설치 여부 확인
Python 개발 도구 선정 및 설치 (예: VSCode, PyCharm 등)
"Hello Mars"를 출력하는 코드 작성으로 환경 테스트

#####################################################################
2. 로그 분석 프로그램 구현 (main.py)
#####################################################################
파일명은 반드시 main.py
mission_computer_main.log 파일을 읽어 전체 내용을 화면에 출력
예외 상황(파일 없음, 디코딩 오류 등)에 대비한 예외 처리 구현
로그 파일 내용을 콤마(,)를 기준으로 날짜/시간과 메시지를 분리하여 Python의 리스트(List) 객체로 전환
리스트 객체를 화면에 출력
리스트 객체를 시간 역순으로 정렬하여 출력
정렬된 리스트를 사전(Dict) 객체로 변환
변환된 Dict 객체를 mission_computer_main.json 파일로 저장 (UTF-8, JSON 포맷)

#####################################################################
3. 사고 원인 분석 보고서 작성 (log_analysis.md)
#####################################################################
로그 파일을 분석하여 사고 원인을 추론
Markdown 형식으로 사고 분석 보고서를 작성
파일명은 반드시 log_analysis.md
UTF-8 인코딩으로 저장

#####################################################################
4. (보너스) 고급 기능 구현
#####################################################################
로그를 시간의 역순으로 정렬하여 출력
폭발, 누출, 고온, Oxygen 등의 위험 키워드가 포함된 로그만 별도로 필터링하여 파일로 저장
mission_computer_main.json 파일을 대상으로 사용자가 입력한 특정 문자열을 포함한 로그만 출력하는 검색 기능 구현

#####################################################################
개발환경	
#####################################################################
Python 버전은 3.x 버전으로 한다.
Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. 
(PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org)
문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
들여 쓰기는 공백을 기본으로 사용합니다.

#####################################################################
제약사항
#####################################################################
Python 내장 함수 및 라이브러리만 사용 (추가 패키지 설치 금지)
모든 파일 입출력 작업은 예외 처리 필수
JSON 포맷은 정확한 형식으로 저장되어야 함 (key-value 구조, 중첩 불가)
Markdown 형식은 https://www.markdownguide.org/ 기준을 준수