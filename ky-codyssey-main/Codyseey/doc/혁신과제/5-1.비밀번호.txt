###############################################################################
문제 1. 비밀번호 찾기
###############################################################################
emergency_storage_key.zip 의 암호를 풀 수 있는 코드를 작성한다. 
단 암호는 특수 문자없이 숫자와 소문자 알파벳으로 구성된 6자리 문자로 되어 있다.
암호를 푸는 코드를 unlock_zip() 이라는 이름으로 함수로 만든다.
암호를 푸는 과정을 출력하는데 시작 시간과 반복 회수 그리고 진행 시간등을 출력한다.
암호를 푸는데 성공하면 암호는 password.txt로 저장한다.
암호를 풀 수 있는 전체 코드는 door_hacking.py로 저장한다.

###############################################################################
보너스 과제
###############################################################################
암호를 좀 더 빠르게 풀 수 있는 알고리즘을 제시하고 코드로 구현한다.



###############################################################################
문제 2. 카이사르 암호
###############################################################################
password.txt 파일을 읽어온다.
카이사르의 암호를 풀 수 있는 함수를 caesar_cipher_decode() 라는 이름으로 만든다.
caesar_cipher_decode() 함수는 풀어야 하는 문자열을 파라메터로 추가한다. 이때 파라메터의 이름은 target_text으로 한다.
caesar_cipher_decode() 에서 자리수에 따라 암호표가 바뀌게 한다. 자리수는 알파벳 수만큼 반복한다.
자리수에 따라서 해독된 결과를 출력한다.
몇 번째 자리수로 암호가 해독되는지 찾아낸다. 눈으로 식별이 가능하면 해당 번호를 입력하면 그 결과를 result.txt로 저장을 한다.

###############################################################################
보너스 과제
###############################################################################
텍스트 사전을 만들고 사전에 있는 단어와 일치하는 키워드가 암호속에서 발견될 경우 반복을 멈출 수 있게 작성해 보시오.


Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. 
(PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org)
문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
들여 쓰기는 공백을 기본으로 사용합니다.
제약조건	
제약사항
python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
단 zip 파일을 다루는 부분은 외부 라이브러리 사용 가능하다.
반복 할 때마다 결과를 눈으로 확인 할 수 있어야 한다.
경고 메시지 없이 모든 코드는 실행 되어야 한다.
파일을 다루는 부분은 모두 예외처리가 되어 있어야 한다.
암호가 확인 되었을 때 최종 암호가 result.txt로 저장되어야 한다.